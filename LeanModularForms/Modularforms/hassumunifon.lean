/-
Copyright (c) 2025 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck
-/
import Mathlib.Analysis.Calculus.UniformLimitsDeriv
import Mathlib.Analysis.NormedSpace.FunctionSeries
import Mathlib.Topology.Algebra.InfiniteSum.UniformOn
import Mathlib

/-!
# Continuity of series of functions

We prove some HasSumUniformlyOn versions of theorems from
`Mathlib.Analysis.NormedSpace.FunctionSeries`.

Alongside this we prove `derivWithin_tsum` which states that the derivative of a series of functions
is the sum of the derivatives, under suitable conditions.

-/

open Set Metric TopologicalSpace Function Filter

open scoped Topology NNReal

variable {Œ± Œ≤ F : Type*} [NormedAddCommGroup F] [CompleteSpace F] {u : Œ± ‚Üí ‚Ñù}

theorem HasSumUniformlyOn_of_bounded {f : Œ± ‚Üí Œ≤ ‚Üí F} (hu : Summable u) {s : Set Œ≤}
    (hfu : ‚àÄ n x, x ‚àà s ‚Üí ‚Äñf n x‚Äñ ‚â§ u n) : HasSumUniformlyOn f (fun x => ‚àë' n, f n x) {s} :=  by
  simp [hasSumUniformlyOn_iff_tendstoUniformlyOn, tendstoUniformlyOn_tsum hu hfu]

theorem HasSumUniformlyOn_of_cofinite_eventually {Œπ : Type*} {f : Œπ ‚Üí Œ≤ ‚Üí F} {u : Œπ ‚Üí ‚Ñù}
    (hu : Summable u) {s : Set Œ≤} (hfu : ‚àÄ·∂† n in cofinite, ‚àÄ x ‚àà s, ‚Äñf n x‚Äñ ‚â§ u n) :
    HasSumUniformlyOn f (fun x => ‚àë' n, f n x) {s} := by
  simp [hasSumUniformlyOn_iff_tendstoUniformlyOn,
    tendstoUniformlyOn_tsum_of_cofinite_eventually hu hfu]

lemma SummableLocallyUniformlyOn_of_locally_bounded [TopologicalSpace Œ≤] [LocallyCompactSpace Œ≤]
    (f : Œ± ‚Üí Œ≤ ‚Üí F) {s : Set Œ≤} (hs : IsOpen s)
    (hu : ‚àÄ K ‚äÜ s, IsCompact K ‚Üí ‚àÉ u : Œ± ‚Üí ‚Ñù, Summable u ‚àß ‚àÄ n (k : K), ‚Äñf n k‚Äñ ‚â§ u n) :
    SummableLocallyUniformlyOn f s := by
  apply HasSumLocallyUniformlyOn.summableLocallyUniformlyOn (g := (fun x => ‚àë' i, f i x))
  rw [hasSumLocallyUniformlyOn_iff_tendstoLocallyUniformlyOn,
    tendstoLocallyUniformlyOn_iff_forall_isCompact hs]
  intro K hK hKc
  obtain ‚ü®u, hu1, hu2‚ü© := hu K hK hKc
  apply tendstoUniformlyOn_tsum hu1 fun n x hx ‚Ü¶ hu2 n ‚ü®x, hx‚ü©

/-- The `derivWithin` of a absolutely and uniformly converget sum on an open set `s` is the sum
of the derivatives of squence of functions on the open set `s` -/
theorem derivWithin_tsum {F E : Type*} [NontriviallyNormedField E] [IsRCLikeNormedField E]
    [NormedField F] [NormedSpace E F] (f : Œ± ‚Üí E ‚Üí F) {s : Set E}
    (hs : IsOpen s) {x : E} (hx : x ‚àà s) (hf : ‚àÄ y ‚àà s, Summable fun n ‚Ü¶ f n y)
    (h : SummableLocallyUniformlyOn (fun n ‚Ü¶ (derivWithin (fun z ‚Ü¶ f n z) s)) s)
    (hf2 : ‚àÄ n r, r ‚àà s ‚Üí DifferentiableAt E (f n) r) :
    derivWithin (fun z ‚Ü¶ ‚àë' n , f n z) s x = ‚àë' n, derivWithin (f n) s x := by
  apply HasDerivWithinAt.derivWithin ?_ (IsOpen.uniqueDiffWithinAt hs hx)
  apply HasDerivAt.hasDerivWithinAt
  apply hasDerivAt_of_tendstoLocallyUniformlyOn hs _ _ (fun y hy ‚Ü¶ Summable.hasSum (hf y hy)) hx
  ¬∑ use fun n : Finset Œ± ‚Ü¶ fun a ‚Ü¶ ‚àë i ‚àà n, derivWithin (fun z ‚Ü¶ f i z) s a
  ¬∑ obtain ‚ü®g, hg‚ü© := h
    apply (hasSumLocallyUniformlyOn_iff_tendstoLocallyUniformlyOn.mp hg).congr_right
    exact fun _ hb ‚Ü¶ Eq.symm (HasSumLocallyUniformlyOn.tsum_eqOn hg hb)
  ¬∑ filter_upwards with t r hr
    apply HasDerivAt.fun_sum
    intro q hq
    apply HasDerivWithinAt.hasDerivAt
    ¬∑ exact DifferentiableWithinAt.hasDerivWithinAt (hf2 q r hr).differentiableWithinAt
    ¬∑ exact IsOpen.mem_nhds hs hr


lemma tsum_eq_summable {Œπ Œ± : Type*} [AddCommMonoid Œ±] [ TopologicalSpace Œ±]
    (g : Œπ ‚Üí Œ±) (h : ‚àë' n, g n ‚â† 0) :
    Summable g := by
  by_contra hg
  rw [tsum_eq_zero_of_not_summable hg] at h
  aesop


variable {Œ± Œ≤ Œπ : Type*} [CommMonoid Œ±] {f : Œπ ‚Üí Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {ùîñ : Set (Set Œ≤)}
  {x : Œ≤} {s : Set Œ≤} {I : Finset Œπ} [UniformSpace Œ±] [TopologicalSpace Œ≤] [T2Space Œ±] [DecidableEq Œπ]

@[to_additive]
lemma MultipliableLocallyUniformlyOn_congr (f f' : Œπ ‚Üí Œ≤ ‚Üí Œ±) (h : ‚àÄ i,  s.EqOn (f i)  (f' i))
    (h2 : MultipliableLocallyUniformlyOn f s):
    MultipliableLocallyUniformlyOn f' s := by
  apply HasProdLocallyUniformlyOn.multipliableLocallyUniformlyOn
  have H := h2.hasProdLocallyUniformlyOn
  apply H.congr
  intro v
  induction' v using Finset.induction_on with i S hi hs
  simp
  intro t ht
  simp
  intro x hx
  simp
  have H := hs hx
  simp at *
  congr
  ext i
  exact h i hx


theorem iteratedDerivWithin_tsum {F E : Type*} [NontriviallyNormedField E] [IsRCLikeNormedField E]
    [NormedField F] [NormedSpace E F] (f : Œπ ‚Üí E ‚Üí F) {s : Set E} (m : ‚Ñï)
    (hs : IsOpen s) {x : E} (hx : x ‚àà s)
    (h : ‚àÄ k, SummableLocallyUniformlyOn (fun n ‚Ü¶ (iteratedDerivWithin k (fun z ‚Ü¶ f n z) s)) s)
    (hf2 : ‚àÄ n k r, r ‚àà s ‚Üí DifferentiableAt E (iteratedDerivWithin k (fun z ‚Ü¶ f n z) s) r) :
    iteratedDerivWithin m (fun z ‚Ü¶ ‚àë' n , f n z) s x = ‚àë' n, iteratedDerivWithin m (f n) s x := by
  induction' m with m hm generalizing x
  ¬∑ simp
  ¬∑ simp_rw [iteratedDerivWithin_succ]
    rw [‚Üê derivWithin_tsum _ hs hx]
    ¬∑ apply derivWithin_congr (fun _ ht ‚Ü¶ hm ht) (hm hx)
    ¬∑ intro y hy
      apply ((h m).summable hy).congr
      intro b
      simp
    ¬∑ apply SummableLocallyUniformlyOn_congr _ _ _ (h (m+1))
      intro i t ht
      rw [iteratedDerivWithin_succ]
    ¬∑ intro n r hr
      exact hf2 n m _ hr

theorem iteratedDerivWithin_tsum2 {F E : Type*} [NontriviallyNormedField E] [IsRCLikeNormedField E]
    [NormedField F] [NormedSpace E F] (f : Œπ ‚Üí E ‚Üí F) {s : Set E} (m : ‚Ñï)
    (hs : IsOpen s) {x : E} (hx : x ‚àà s)
    (h : SummableLocallyUniformlyOn (fun n ‚Ü¶ (iteratedDerivWithin m (fun z ‚Ü¶ f n z) s)) s)
    (hf2 : ‚àÄ n k r, r ‚àà s ‚Üí DifferentiableAt E (iteratedDerivWithin k (fun z ‚Ü¶ f n z) s) r) :
    iteratedDerivWithin m (fun z ‚Ü¶ ‚àë' n , f n z) s x = ‚àë' n, iteratedDerivWithin m (f n) s x := by
  induction' m using Nat.case_strong_induction_on  with m hm generalizing x
  simp
  simp_rw [iteratedDerivWithin_succ]
  rw [‚Üê derivWithin_tsum _ hs hx]
  ¬∑ apply derivWithin_congr
    intro t ht
    have HM := hm m ?_ ht
    sorry
    sorry


  sorry

lemma derivWithin_SummableUniformlyOn_eq {F E : Type*} [NontriviallyNormedField E] [IsRCLikeNormedField E]
    [NormedField F] [NormedSpace E F] {f g : Œ± ‚Üí E ‚Üí F} {s : Set E}
    (hs : IsOpen s) (hf0 : ‚àÄ y ‚àà s, Summable fun n ‚Ü¶ f n y)
    (hg0 :  ‚àÄ y ‚àà s, Summable fun n ‚Ü¶ g n y)
    (hf : SummableLocallyUniformlyOn (fun n ‚Ü¶ (derivWithin (fun z ‚Ü¶ f n z) s)) s)
    (hg : SummableLocallyUniformlyOn (fun n ‚Ü¶ (derivWithin (fun z ‚Ü¶ g n z) s)) s)
    (hfg :s.EqOn (‚àë' n, f n) (‚àë' n, g n))
    (hf2 : ‚àÄ n r, r ‚àà s ‚Üí DifferentiableAt E (f n) r)
    (hg2 : ‚àÄ n r, r ‚àà s ‚Üí DifferentiableAt E (g n) r)  :
    s.EqOn (‚àë' n,  (derivWithin (f n) s))  (‚àë' n,  (derivWithin (g n) s)) := by
  intro z hz
  have := derivWithin_tsum f hs hz hf0 hf hf2
  rw [tsum_apply, ‚Üê this]
  have := derivWithin_tsum g hs hz hg0 hg hg2
  rw [tsum_apply, ‚Üê this]
  apply derivWithin_congr
  intro t ht
  have H := hfg ht
  simp
  rw [tsum_apply, tsum_apply] at H
  exact H
  all_goals {sorry}
